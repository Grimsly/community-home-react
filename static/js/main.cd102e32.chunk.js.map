{"version":3,"sources":["Communities.js","serviceWorker.js","index.js"],"names":["sortHouses","houses","map","Map","house","has","communityId","get","push","set","ReactModal","setAppElement","Communities","props","currentCommunity","currentHouses","state","error","isLoaded","communities","modalOpen","handleOpenModal","bind","handleCloseModal","this","setState","community","fetch","then","res","json","result","averagePrice","undefined","houseFound","lowest","highest","lowestPrice","highestPrice","index","length","price","getAveragePrice","key","id","className","style","backgroundImage","imgUrl","onClick","updateModal","name","sort","a","b","message","createCommunity","isOpen","contentLabel","onRequestClose","overlayClassName","type","area","checkHousesExist","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.cd102e32.chunk.js","sourcesContent":["import React from 'react';\nimport ReactModal from 'react-modal'\nimport './Communities.scss';\n\nReactModal.setAppElement('#root');\n\nclass Communities extends React.Component {\n\n\tcurrentCommunity = {};\n\tcurrentHouses = [];\n\n  constructor(props){\n    super(props);\n    this.state= {\n      error: null,\n      isLoaded: false,\n      communities: [],\n      houses: new Map(),\n\t\t\tmodalOpen: false,\n\t\t\tcurrentCommunity: {},\n\t\t\tcurrentHouses: []\n    };\n\n    this.handleOpenModal = this.handleOpenModal.bind(this);\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n  }\n\n  handleOpenModal(){\n    this.setState({modalOpen: true});\n  }\n\n  handleCloseModal(){\n\t\tthis.setState({modalOpen: false});\n\t}\n\t\n\t// When a community is pressed, make sure that the modal window's information correlates to the community.\n\t// Updates the app as to what community was pressed on.\n\t// Opens the Modal Window after updating\n\tupdateModal(community, houses){\n\t\tthis.currentCommunity = community\n\t\tthis.currentHouses = houses\n\t\tthis.handleOpenModal();\n\t}\n\n  componentDidMount() {\n\t\t// Fetch the communites from the API\n    fetch(\"https://a18fda49-215e-47d1-9dc6-c6136a04a33a.mock.pstmn.io/communities\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            communities: result\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// If the GET from the previous fetch was a success, perform another fetch, this time for the houses.\n          fetch(\"https://a18fda49-215e-47d1-9dc6-c6136a04a33a.mock.pstmn.io/homes\")\n            .then(res => res.json())\n            .then(\n              (result) => {\n                this.setState({\n\t\t\t\t\t\t\t\t\t// Set the state of the app to be loaded\n                  isLoaded: true,\n                  houses: sortHouses(result)\n                });\n                \n              },\n              (error) => {\n                this.setState({\n                  isLoaded: true,\n                  error: error\n                });\n              }\n            )\n\t\t\t\t},\n\t\t\t\t// Return the error if there was one\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error: error\n          });\n        }\n      )\n\t}\n\t\n\t// Creates and return communities in HTML format\n\t// When any of the communitees are clicked or pressed on, a modal window will appear to show the listed houses.\n\tcreateCommunity(community, houses){\n\t\tconst averagePrice = getAveragePrice(houses);\n\t\n\t\treturn (\n\t\t\t<div key={community.id} className=\"community\" style={{backgroundImage: \"linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.5)), url(\" + community.imgUrl + \")\"}} onClick={this.updateModal.bind(this, community, houses)}>\n\t\t\t\t<div className=\"description\">\n\t\t\t\t\t<h2>{community.name}</h2>\n\t\t\t\t\t{(() => {\n\t\t\t\t\t\tif (averagePrice.houseFound === true){\n\t\t\t\t\t\t\tif (averagePrice.lowest === averagePrice.highest){\n\t\t\t\t\t\t\t\treturn <p>${averagePrice.lowest}</p>\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\treturn <p>${averagePrice.lowest} - ${averagePrice.highest}</p>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\treturn <p>Prices Not Available</p>\n\t\t\t\t\t\t}\n\t\t\t\t\t})()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n  render() {\n    const{ error, isLoaded, communities, houses} = this.state;\n\t\t\n\t\t// Sort the communites alphabetically\n\t\t// This assumes that the community names are consistent with cases\n    communities.sort(function(a, b){\n      if (a.name > b.name){\n        return 1;\n      }else{\n        return -1;\n      }\n    })\n\n\t\t// If an error occured while fetching the API, then the error will be printed\n\t\t// If the fetch is still performing the GET, show a loading screen\n\t\t// When done loading, form the body of the app\n    if (error){\n      return <div className=\"Communities\">Error: {error.message}</div>\n    }else if (!isLoaded){\n      return <div id=\"loading\" className=\"Communities\">Loading...</div>\n    }else{\n      return(\n        <div className=\"Communities\">\n          <h1>Communities</h1>\n          <div id=\"communities\">\n            {communities.map(community => (\n              this.createCommunity(community, houses.get(community.id))\n            ))}\n          </div>\n\n\t\n\t\t\t\t<ReactModal\n\t\t\t\t\tisOpen={this.state.modalOpen}\n\t\t\t\t\tcontentLabel=\"onRequestClose houseList\"\n\t\t\t\t\tonRequestClose={this.handleCloseModal}\n\t\t\t\t\tclassName=\"CommunitySpecifics\"\n\t\t\t\t\toverlayClassName=\"Background\"\n\t\t\t\t>\n\t\t\t\t\t<button className=\"closeButton\" onClick={this.handleCloseModal}>X</button>\n\n\t\t\t\t\t<h1>{this.currentCommunity.name}</h1>\n\t\t\t\t\t{checkHousesExist(this.currentHouses)}\n\t\t\t\t\t\n\t\t\t\t</ReactModal>  \n        </div>\n      )\n    }\n\t}\n}\n\n// Checks if the community has houses\n// If it does, then create a list of houses and return the elements\n// If not, then give notice that there are no houses.\nfunction checkHousesExist(houses){\n\tif (houses){\n\t\treturn(\n\t\t\t<table className=\"HouseList\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr key=\"header\">\n\t\t\t\t\t\t<th>Type</th>\n\t\t\t\t\t\t<th>Area</th>\n\t\t\t\t\t\t<th>Price</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{houses.map(house => (\n\t\t\t\t\t\t<tr key={house.id}>\n\t\t\t\t\t\t\t<td>{house.type}</td>\n\t\t\t\t\t\t\t<td>{house.area}</td>\n\t\t\t\t\t\t\t<td>${house.price}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t)\n\t}else{\n\t\treturn \t(<div>No houses available</div>)\n\t}\n}\n\n// From an array of houses, find the lowest price and the highest\n// If the argument passed in is an undefined, it means that the community has no houses, so return a boolean for notification\nfunction getAveragePrice(houses){\n    if (houses === undefined){\n      return {houseFound: false, lowest: 0, highest: 0};\n    }\n    let lowestPrice;\n    let highestPrice;\n    for (let index = 0; index < houses.length; index++){\n      if (index === 0){\n        lowestPrice = houses[0].price;\n        highestPrice = houses[0].price;\n      }else{\n        if (lowestPrice > houses[index].price){\n          lowestPrice = houses[index].price;\n        }else if (highestPrice < houses[index].price){\n          highestPrice = houses[index].price;\n        }\n      }\n    }\n\n    return {houseFound: true, lowest: lowestPrice, highest: highestPrice};\n}\n\n// Sorts the houses by using the community ID\n// Creates a map that uses the community ID as the key\n// Each key's value is an array of houses\n// Returns the map\nfunction sortHouses(houses){\n  let map = new Map();\n  for (let house of houses){\n    if (map.has(house.communityId)){\n      map.get(house.communityId).push(house);\n    }else{\n      map.set(house.communityId, [house]);\n    }\n  }\n\n  return map;\n}\n\nexport default Communities;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Communities from './Communities';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Communities />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}