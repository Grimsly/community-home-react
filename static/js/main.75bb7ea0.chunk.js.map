{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sortHouses","houses","map","Map","house","has","communityId","get","push","set","App","props","state","error","isLoaded","communities","fetch","then","res","json","result","setState","this","console","log","sort","a","b","name","message","className","id","community","averagePrice","undefined","houseFound","lowest","highest","lowestPrice","highestPrice","index","length","price","getAveragePrice","key","style","backgroundImage","imgUrl","createCommunity","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"yQA6HA,SAASA,EAAWC,GAClB,IAAIC,EAAM,IAAIC,IADW,uBAEzB,YAAkBF,EAAlB,+CAAyB,CAAC,IAAjBG,EAAgB,QACnBF,EAAIG,IAAID,EAAME,aAChBJ,EAAIK,IAAIH,EAAME,aAAaE,KAAKJ,GAEhCF,EAAIO,IAAIL,EAAME,YAAa,CAACF,KANP,kFAUzB,OAAOF,EAGMQ,M,YAtIb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAO,CACVC,MAAO,KACPC,UAAU,EACVC,YAAa,GACbd,OAAQ,IAAIE,KANE,E,iFAUG,IAAD,OAClBa,MAAM,0EACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZN,YAAaK,IAEfJ,MAAM,oEACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZP,UAAU,EACVb,OAAQD,EAAWoB,QAIvB,SAACP,GACC,EAAKQ,SAAS,CACZP,UAAU,EACVD,gBAKV,SAACA,GACC,EAAKQ,SAAS,CACZP,UAAU,EACVD,e,+BAMA,IAAD,EACwCS,KAAKV,MAA7CC,EADA,EACAA,MAAOC,EADP,EACOA,SAAUC,EADjB,EACiBA,YAAad,EAD9B,EAC8BA,OAUrC,OATAsB,QAAQC,IAAIvB,GACZc,EAAYU,MAAK,SAASC,EAAGC,GAC3B,OAAID,EAAEE,KAAOD,EAAEC,KACN,GAEC,KAIRf,EACK,uCAAaA,EAAMgB,SACjBf,EAIP,yBAAKgB,UAAU,OACb,yBAAKC,GAAG,eACLhB,EAAYb,KAAI,SAAA8B,GAAS,OAUtC,SAAyBA,EAAW/B,GAClCsB,QAAQC,IAAI,QACZ,IAAMS,EAsBR,SAAyBhC,GAErB,GADAsB,QAAQC,IAAIvB,QACGiC,IAAXjC,EACF,MAAO,CAACkC,YAAY,EAAOC,OAAQ,EAAGC,QAAS,GAIjD,IAFA,IAAIC,EACAC,EACKC,EAAQ,EAAGA,EAAQvC,EAAOwC,OAAQD,IAC3B,IAAVA,GACFF,EAAcrC,EAAO,GAAGyC,MACxBH,EAAetC,EAAO,GAAGyC,OAErBJ,EAAcrC,EAAOuC,GAAOE,MAC9BJ,EAAcrC,EAAOuC,GAAOE,MACpBH,EAAetC,EAAOuC,GAAOE,QACrCH,EAAetC,EAAOuC,GAAOE,OAKnC,MAAO,CAACP,YAAY,EAAMC,OAAQE,EAAaD,QAASE,GA1CrCI,CAAgB1C,GAErC,OACE,yBAAK2C,IAAKZ,EAAUD,GAAID,UAAU,YAAYe,MAAO,CAACC,gBAAiB,OAASd,EAAUe,OAAS,MACjG,yBAAKjB,UAAU,eACb,4BAAKE,EAAUJ,OAEmB,IAA5BK,EAAaE,WACXF,EAAaG,SAAWH,EAAaI,QAChC,+BAAKJ,EAAaG,QAElB,+BAAKH,EAAaG,OAAlB,OAA8BH,EAAaI,SAG7C,qDAzBLW,CAAgBhB,EAAW/B,EAAOM,IAAIyB,EAAUD,UANjD,+C,GA5DKkB,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAApD,GACLU,QAAQV,MAAMA,EAAMgB,a","file":"static/js/main.75bb7ea0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state= {\n      error: null,\n      isLoaded: false,\n      communities: [],\n      houses: new Map()\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://a18fda49-215e-47d1-9dc6-c6136a04a33a.mock.pstmn.io/communities\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            communities: result\n          });\n          fetch(\"https://a18fda49-215e-47d1-9dc6-c6136a04a33a.mock.pstmn.io/homes\")\n            .then(res => res.json())\n            .then(\n              (result) => {\n                this.setState({\n                  isLoaded: true,\n                  houses: sortHouses(result)\n                });\n                \n              },\n              (error) => {\n                this.setState({\n                  isLoaded: true,\n                  error\n                });\n              }\n            )\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const{ error, isLoaded, communities, houses} = this.state;\n    console.log(houses)\n    communities.sort(function(a, b){\n      if (a.name > b.name){\n        return 1;\n      }else{\n        return -1;\n      }\n    })\n\n    if (error){\n      return <div>Error: {error.message}</div>\n    }else if (!isLoaded){\n      return <div>Loading...</div>\n    }else{\n      return(\n        <div className=\"App\">\n          <div id=\"communities\">\n            {communities.map(community => (\n              createCommunity(community, houses.get(community.id))\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\nfunction createCommunity(community, houses){\n  console.log('adad')\n  const averagePrice = getAveragePrice(houses);\n\n  return (\n    <div key={community.id} className=\"community\" style={{backgroundImage: \"url(\" + community.imgUrl + \")\"}}>\n      <div className=\"description\">\n        <h2>{community.name}</h2>\n        {(() => {\n          if (averagePrice.houseFound === true){\n            if (averagePrice.lowest === averagePrice.highest){\n              return <p>${averagePrice.lowest}</p>\n            }else{\n              return <p>${averagePrice.lowest} - ${averagePrice.highest}</p>\n            }\n          }else{\n            return <p>Prices Not Available</p>\n          }\n        })()}\n      </div>\n    </div>  \n  )\n}\n\nfunction getAveragePrice(houses){\n    console.log(houses)\n    if (houses === undefined){\n      return {houseFound: false, lowest: 0, highest: 0};\n    }\n    let lowestPrice;\n    let highestPrice;\n    for (let index = 0; index < houses.length; index++){\n      if (index === 0){\n        lowestPrice = houses[0].price;\n        highestPrice = houses[0].price;\n      }else{\n        if (lowestPrice > houses[index].price){\n          lowestPrice = houses[index].price;\n        }else if (highestPrice < houses[index].price){\n          highestPrice = houses[index].price;\n        }\n      }\n    }\n\n    return {houseFound: true, lowest: lowestPrice, highest: highestPrice};\n}\n\nfunction sortHouses(houses){\n  let map = new Map();\n  for (let house of houses){\n    if (map.has(house.communityId)){\n      map.get(house.communityId).push(house);\n    }else{\n      map.set(house.communityId, [house]);\n    }\n  }\n\n  return map;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}